---
/**
 * Optimized Picture component using Astro's built-in image optimization
 * Generates modern image formats with fallbacks for better performance
 */

import { getModernImage, getResponsiveImage } from '../../utils/assets';
import type { ImageMetadata } from 'astro';

export interface Props {
  src: ImageMetadata | string;
  alt: string;
  width?: number;
  height?: number;
  sizes?: string;
  widths?: number[];
  quality?: number;
  loading?: 'lazy' | 'eager';
  class?: string;
  style?: string;
  responsive?: boolean;
  preload?: boolean;
}

const {
  src,
  alt,
  width = 800,
  height,
  sizes = '(max-width: 768px) 100vw, 50vw',
  widths = [400, 800, 1200],
  quality = 80,
  loading = 'lazy',
  class: className,
  style,
  responsive = true,
  preload = false,
} = Astro.props;

// Generate optimized images
let imageData;

if (responsive && widths.length > 1) {
  // Generate responsive image set
  imageData = await getResponsiveImage(src, {
    widths,
    sizes,
    quality,
    alt,
    loading,
    fallbackWidth: width,
  });
} else {
  // Generate modern format images
  imageData = await getModernImage(src, {
    width,
    height,
    quality,
    alt,
    loading,
  });
}

// Preload if requested (for above-the-fold images)
if (preload && typeof imageData === 'object' && 'fallback' in imageData) {
  // This will be rendered in the head for preloading
}
---

{responsive && 'srcset' in imageData ? (
  <img
    src={imageData.src}
    srcset={imageData.srcset}
    sizes={imageData.sizes}
    alt={imageData.alt}
    width={imageData.width}
    height={imageData.height}
    loading={imageData.loading}
    decoding={imageData.decoding}
    class={className}
    style={style}
  />
) : 'avif' in imageData ? (
  <picture class={className} style={style}>
    <source srcset={imageData.avif.src} type="image/avif" />
    <source srcset={imageData.webp.src} type="image/webp" />
    <img
      src={imageData.fallback.src}
      alt={imageData.alt}
      width={imageData.width}
      height={imageData.height}
      loading={imageData.loading}
      decoding="async"
    />
  </picture>
) : (
  <img
    src={imageData.src}
    alt={imageData.alt}
    width={imageData.width}
    height={imageData.height}
    loading={imageData.loading}
    decoding={imageData.decoding}
    class={className}
    style={style}
  />
)}

{preload && 'fallback' in imageData && (
  <link
    rel="preload"
    href={imageData.fallback.src}
    as="image"
    type="image/jpeg"
  />
)}
