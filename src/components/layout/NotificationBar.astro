---
// Optional notification content - can be configured or hidden
export interface Props {
  message?: string;
  ctaText?: string;
  ctaUrl?: string;
  type?: 'info' | 'success' | 'warning' | 'announcement';
  dismissible?: boolean;
}

const { 
  message = "ðŸš€ New! Check out our latest technical SEO audit tool", 
  ctaText = "Learn More",
  ctaUrl = "/contact",
  type = "announcement",
  dismissible = true 
} = Astro.props;
---

<div class="notification-bar" data-type={type} id="notification-bar">
  <div class="notification-content">
    <div class="notification-message">
      <span>{message}</span>
      {ctaText && ctaUrl && (
        <a href={ctaUrl} class="notification-cta">{ctaText}</a>
      )}
    </div>
    {dismissible && (
      <button class="notification-close" aria-label="Close notification" id="close-notification">
        <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path d="M12 4L4 12M4 4L12 12" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
        </svg>
      </button>
    )}
  </div>
</div>

<style>
  .notification-bar {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    padding: 0.75rem 0;
    font-size: 0.875rem;
    position: relative;
    z-index: 1000;
  }

  .notification-bar[data-type="info"] {
    background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
  }

  .notification-bar[data-type="success"] {
    background: linear-gradient(135deg, #43e97b 0%, #38f9d7 100%);
  }

  .notification-bar[data-type="warning"] {
    background: linear-gradient(135deg, #fa709a 0%, #fee140 100%);
  }

  .notification-content {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 1rem;
    display: flex;
    align-items: center;
    justify-content: space-between;
    gap: 1rem;
  }

  .notification-message {
    display: flex;
    align-items: center;
    gap: 1rem;
    flex: 1;
  }

  .notification-cta {
    color: white;
    text-decoration: underline;
    font-weight: 500;
    transition: opacity 0.2s ease;
  }

  .notification-cta:hover {
    opacity: 0.8;
  }

  .notification-close {
    background: none;
    border: none;
    color: white;
    cursor: pointer;
    padding: 0.25rem;
    border-radius: 0.25rem;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: background-color 0.2s ease;
  }

  .notification-close:hover {
    background-color: rgba(255, 255, 255, 0.1);
  }

  .notification-close:focus {
    outline: 2px solid rgba(255, 255, 255, 0.5);
    outline-offset: 2px;
  }

  .notification-bar.hidden {
    display: none;
  }

  /* Responsive design */
  @media (max-width: 768px) {
    .notification-content {
      padding: 0 0.75rem;
    }
    
    .notification-message {
      font-size: 0.8rem;
    }
    
    .notification-cta {
      white-space: nowrap;
    }
  }
</style>

<script>
  // Handle notification dismissal
  document.addEventListener('DOMContentLoaded', function() {
    const notificationBar = document.getElementById('notification-bar');
    const closeButton = document.getElementById('close-notification');
    
    if (!notificationBar || !closeButton) return;

    // Check if notification was previously dismissed
    const isDismissed = localStorage.getItem('notification-dismissed') === 'true';
    if (isDismissed) {
      notificationBar.classList.add('hidden');
      return;
    }

    // Handle close button click
    closeButton.addEventListener('click', function() {
      notificationBar.classList.add('hidden');
      localStorage.setItem('notification-dismissed', 'true');
    });

    // Handle keyboard navigation
    closeButton.addEventListener('keydown', function(e) {
      if (e.key === 'Enter' || e.key === ' ') {
        e.preventDefault();
        closeButton.click();
      }
    });
  });
</script>
