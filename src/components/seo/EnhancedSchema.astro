---
/**
 * Enhanced Schema Component
 * Automatically generates comprehensive structured data for pages
 */

import type { AnySchema } from '../../types/schema';
import { generatePageSchema, cleanSchema, validateSchema } from '../../utils/schema';
import { getCollection } from 'astro:content';

// Import validation for development
import ValidationReport from '../dev/ValidationReport.astro';

export interface Props {
  // Page-specific data
  type?: 'webpage' | 'article' | 'service' | 'product' | 'faq' | 'about' | 'contact';
  title: string;
  description: string;
  url: string;
  image?: string;
  author?: {
    name: string;
    url?: string;
    image?: string;
    jobTitle?: string;
  };
  datePublished?: string;
  dateModified?: string;
  breadcrumbs?: Array<{ name: string; url?: string }>;
  faqs?: Array<{ question: string; answer: string }>;
  services?: Array<{
    name: string;
    description: string;
    serviceType?: string;
    category?: string;
  }>;
  products?: Array<{
    name: string;
    description: string;
    category?: string;
    sku?: string;
  }>;
  // Custom schema override
  customSchema?: AnySchema[];
}

const {
  type = 'webpage',
  title,
  description,
  url,
  image,
  author,
  datePublished,
  dateModified,
  breadcrumbs,
  faqs,
  services,
  products,
  customSchema,
} = Astro.props;

// Get global configuration from content collections
let globalConfig;
try {
  const globalCollection = await getCollection('global');
  globalConfig = globalCollection.find(item => item.id === 'site-config')?.data || {};
} catch {
  globalConfig = {};
}

// Default site configuration
const siteConfig = {
  organization: {
    name: globalConfig.organization?.name || 'Your Company',
    url: globalConfig.organization?.url || Astro.site?.toString() || 'https://yourwebsite.com',
    logo: globalConfig.organization?.logo,
    description: globalConfig.organization?.description,
    email: globalConfig.organization?.email,
    telephone: globalConfig.organization?.telephone,
    address: globalConfig.organization?.address,
    sameAs: globalConfig.organization?.socialMedia || [],
  },
  website: {
    name: globalConfig.website?.name || title,
    url: Astro.site?.toString() || 'https://yourwebsite.com',
    description: globalConfig.website?.description || description,
  },
  defaultAuthor: globalConfig.defaultAuthor || author,
};

// Generate schemas
let schemas: AnySchema[] = [];

if (customSchema) {
  // Use custom schema if provided
  schemas = customSchema;
} else {
  // Generate automatic schema
  schemas = generatePageSchema(
    {
      type,
      title,
      description,
      url,
      image,
      author,
      datePublished,
      dateModified,
      breadcrumbs,
      faqs,
      services,
      products,
    },
    siteConfig as any
  );
}

// Clean and validate schemas
const validSchemas = schemas
  .map(schema => cleanSchema(schema))
  .filter(schema => validateSchema(schema));

// Log validation results in development
if (import.meta.env.DEV) {
  const invalidCount = schemas.length - validSchemas.length;
  if (invalidCount > 0) {
    console.warn(`[Schema] ${invalidCount} invalid schemas filtered out for ${url}`);
  }
  console.log(`[Schema] Generated ${validSchemas.length} valid schemas for ${url}`);
}
---

{validSchemas.map((schema, index) => (
  <script 
    type="application/ld+json" 
    set:html={JSON.stringify(schema, null, import.meta.env.DEV ? 2 : 0)}
    data-schema-type={schema['@type']}
    data-schema-index={index}
  />
))}

<!-- Schema validation in development -->
{import.meta.env.DEV && (
  <script is:inline>
    // Development-only schema validation
    document.addEventListener('DOMContentLoaded', () => {
      const schemas = document.querySelectorAll('script[type="application/ld+json"]');
      console.group('üîç Schema.org Validation');
      
      schemas.forEach((script, index) => {
        try {
          const data = JSON.parse(script.innerHTML);
          const type = script.getAttribute('data-schema-type');
          console.log(`‚úÖ Schema ${index + 1} (${type}):`, data);
          
          // Basic validation warnings
          if (!data['@context']) {
            console.warn(`‚ö†Ô∏è Schema ${index + 1}: Missing @context`);
          }
          if (!data['@type']) {
            console.warn(`‚ö†Ô∏è Schema ${index + 1}: Missing @type`);
          }
        } catch (error) {
          console.error(`‚ùå Schema ${index + 1}: Invalid JSON`, error);
        }
      });
      
      console.groupEnd();
    });
  </script>
)}

<!-- Content validation in development -->
<ValidationReport 
  seoData={{
    title,
    description,
    keywords: [title, description, ...(faqs?.map(f => f.question) || [])],
    robots: 'index, follow',
    author: author?.name,
  }}
  schemas={validSchemas}
/>
