---
// Import layout
import SiteLayout from '../layouts/SiteLayout.astro';

// Import components
import EnhancedSchema from '../components/seo/EnhancedSchema.astro';

// Import content utilities
import { getAllBlogPosts, getFeaturedBlogPosts, getAllAuthors, getBlogSEO } from '../utils/content.ts';

// Get blog data
const allPosts = await getAllBlogPosts();
const featuredPosts = await getFeaturedBlogPosts();
const authors = await getAllAuthors();
const blogSEO = await getBlogSEO();

// Helper function to get author by ID
function getAuthorById(authorId: string) {
  return authors.find(author => author.id === authorId);
}

// Helper function to format date
function formatDate(date: Date) {
  return date.toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
}

// Helper function to get excerpt from content
function getExcerpt(content: string, maxLength = 150) {
  const textContent = content.replace(/[#*`\[\]]/g, '').trim();
  return textContent.length > maxLength 
    ? textContent.substring(0, maxLength).trim() + '...'
    : textContent;
}

// Group posts by category
const categories = [...new Set(allPosts.map(post => post.data.category))];

// Page metadata
const metadata = {
  title: blogSEO?.title || 'Blog - Technical SEO Insights & Best Practices',
  description: blogSEO?.description || 'Stay up-to-date with the latest technical SEO strategies, best practices, and industry insights from our expert team.',
  url: new URL(Astro.url.pathname, Astro.site).toString(),
  keywords: blogSEO?.keywords?.join(', ') || 'technical SEO blog, SEO insights, web performance, optimization tips, search engine optimization',
  ogType: 'website',
  siteName: 'Technical SEO Starter',
  twitterCard: 'summary_large_image',
};
---

<SiteLayout metadata={metadata}>
  <EnhancedSchema
    type="webpage"
    title={blogSEO?.title || "Blog - Technical SEO Insights & Best Practices"}
    description={blogSEO?.description || "Stay up-to-date with the latest technical SEO strategies and best practices."}
    url={new URL(Astro.url.pathname, Astro.site).toString()}
    breadcrumbs={blogSEO?.schema?.breadcrumbs || [
      { name: 'Home', url: '/' },
      { name: 'Blog' }
    ]}
  />
  
  <main class="blog-page">
    <div class="container">
      <!-- Page Header -->
      <section class="blog-header">
        <h1>Technical SEO Blog</h1>
        <p>Insights, strategies, and best practices to help you master technical SEO and improve your website's search performance.</p>
      </section>

      <!-- Featured Posts Section -->
      {featuredPosts.length > 0 && (
        <section class="featured-posts">
          <h2>Featured Articles</h2>
          <div class="featured-grid">
            {featuredPosts.slice(0, 3).map(post => {
              const author = getAuthorById(post.data.author);
              
              return (
                <article class="featured-post">
                  <div class="post-image">
                    <img 
                      src={post.data.featuredImage} 
                      alt={post.data.title}
                      loading="lazy"
                    />
                    <div class="post-category">
                      <span class="category-badge featured">{post.data.category}</span>
                    </div>
                  </div>
                  
                  <div class="post-content">
                    <div class="post-meta">
                      <time>{formatDate(post.data.publishDate)}</time>
                      {post.data.readTime && (
                        <span class="read-time">{post.data.readTime} min read</span>
                      )}
                    </div>
                    
                    <h3>
                      <a href={`/blog/${post.slug}`}>{post.data.title}</a>
                    </h3>
                    
                    <p class="post-excerpt">{post.data.description}</p>
                    
                    {author && (
                      <div class="post-author">
                        <img 
                          src={author.data.image} 
                          alt={author.data.name}
                          class="author-avatar"
                        />
                        <div class="author-info">
                          <span class="author-name">{author.data.name}</span>
                          <span class="author-role">{author.data.role}</span>
                        </div>
                      </div>
                    )}
                    
                    <div class="post-tags">
                      {post.data.tags.slice(0, 3).map(tag => (
                        <span class="tag">{tag}</span>
                      ))}
                    </div>
                  </div>
                </article>
              );
            })}
          </div>
        </section>
      )}

      <!-- Category Filter -->
      <section class="category-filter">
        <h2>Browse by Category</h2>
        <div class="category-buttons">
          <button class="category-btn active" data-category="all">All Posts</button>
          {categories.map(category => (
            <button class="category-btn" data-category={category}>{category}</button>
          ))}
        </div>
      </section>

      <!-- All Posts Grid -->
      <section class="all-posts">
        <h2>Latest Articles</h2>
        <div class="posts-grid">
          {allPosts.map(post => {
            const author = getAuthorById(post.data.author);
            
            return (
              <article class="post-card" data-category={post.data.category}>
                <div class="post-image">
                  <img 
                    src={post.data.featuredImage} 
                    alt={post.data.title}
                    loading="lazy"
                  />
                  <div class="post-category">
                    <span class="category-badge">{post.data.category}</span>
                  </div>
                </div>
                
                <div class="post-content">
                  <div class="post-meta">
                    <time>{formatDate(post.data.publishDate)}</time>
                    {post.data.readTime && (
                      <span class="read-time">{post.data.readTime} min read</span>
                    )}
                  </div>
                  
                  <h3>
                    <a href={`/blog/${post.slug}`}>{post.data.title}</a>
                  </h3>
                  
                  <p class="post-excerpt">{post.data.description}</p>
                  
                  {author && (
                    <div class="post-author">
                      <img 
                        src={author.data.image} 
                        alt={author.data.name}
                        class="author-avatar"
                      />
                      <div class="author-info">
                        <span class="author-name">{author.data.name}</span>
                        <span class="author-role">{author.data.role}</span>
                      </div>
                    </div>
                  )}
                  
                  <div class="post-tags">
                    {post.data.tags.slice(0, 3).map(tag => (
                      <span class="tag">{tag}</span>
                    ))}
                  </div>
                </div>
              </article>
            );
          })}
        </div>
      </section>

      <!-- Newsletter Signup -->
      <section class="newsletter-signup">
        <div class="newsletter-content">
          <h2>Stay Updated</h2>
          <p>Get the latest technical SEO insights delivered to your inbox. No spam, just valuable content.</p>
          <form class="newsletter-form" action="#" method="POST">
            <div class="form-group">
              <input 
                type="email" 
                placeholder="Enter your email address" 
                required
                class="email-input"
              />
              <button type="submit" class="subscribe-btn">Subscribe</button>
            </div>
          </form>
        </div>
      </section>
    </div>
  </main>
</SiteLayout>

<style>
  .blog-page {
    padding: 4rem 0;
    background: white;
  }

  .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 1rem;
  }

  .blog-header {
    text-align: center;
    margin-bottom: 4rem;
  }

  .blog-header h1 {
    font-size: 3rem;
    font-weight: 700;
    color: #1a202c;
    margin-bottom: 1rem;
  }

  .blog-header p {
    font-size: 1.25rem;
    color: #4a5568;
    max-width: 700px;
    margin: 0 auto;
    line-height: 1.6;
  }

  .featured-posts {
    margin-bottom: 4rem;
  }

  .featured-posts h2,
  .category-filter h2,
  .all-posts h2 {
    font-size: 2rem;
    font-weight: 600;
    color: #1a202c;
    margin-bottom: 2rem;
  }

  .featured-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
    gap: 2rem;
  }

  .featured-post {
    background: white;
    border-radius: 16px;
    overflow: hidden;
    box-shadow: 0 8px 24px rgba(0, 0, 0, 0.1);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
  }

  .featured-post:hover {
    transform: translateY(-8px);
    box-shadow: 0 16px 40px rgba(0, 0, 0, 0.15);
  }

  .post-image {
    position: relative;
    height: 200px;
    overflow: hidden;
  }

  .post-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s ease;
  }

  .featured-post:hover .post-image img {
    transform: scale(1.05);
  }

  .post-category {
    position: absolute;
    top: 1rem;
    left: 1rem;
  }

  .category-badge {
    background: rgba(255, 255, 255, 0.9);
    color: #4a5568;
    padding: 0.5rem 1rem;
    border-radius: 20px;
    font-size: 0.875rem;
    font-weight: 500;
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .category-badge.featured {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
  }

  .post-content {
    padding: 2rem;
  }

  .post-meta {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1rem;
    font-size: 0.875rem;
    color: #4a5568;
  }

  .read-time {
    background: #f0f4f8;
    padding: 0.25rem 0.75rem;
    border-radius: 12px;
  }

  .post-content h3 {
    margin-bottom: 1rem;
  }

  .post-content h3 a {
    color: #1a202c;
    text-decoration: none;
    font-size: 1.25rem;
    font-weight: 600;
    line-height: 1.3;
    transition: color 0.2s ease;
  }

  .post-content h3 a:hover {
    color: #667eea;
  }

  .post-excerpt {
    color: #4a5568;
    line-height: 1.6;
    margin-bottom: 1.5rem;
  }

  .post-author {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    margin-bottom: 1rem;
  }

  .author-avatar {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    object-fit: cover;
  }

  .author-info {
    display: flex;
    flex-direction: column;
  }

  .author-name {
    font-weight: 500;
    color: #1a202c;
    font-size: 0.875rem;
  }

  .author-role {
    font-size: 0.75rem;
    color: #4a5568;
  }

  .post-tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
  }

  .tag {
    background: #e2e8f0;
    color: #2d3748;
    padding: 0.25rem 0.75rem;
    border-radius: 12px;
    font-size: 0.75rem;
    font-weight: 500;
  }

  .category-filter {
    margin-bottom: 3rem;
  }

  .category-buttons {
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;
  }

  .category-btn {
    background: #f8fafc;
    color: #4a5568;
    border: 1px solid #e2e8f0;
    padding: 0.75rem 1.5rem;
    border-radius: 25px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .category-btn:hover,
  .category-btn.active {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    border-color: transparent;
  }

  .posts-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
    gap: 2rem;
    margin-bottom: 4rem;
  }

  .post-card {
    background: white;
    border: 1px solid #e2e8f0;
    border-radius: 12px;
    overflow: hidden;
    transition: transform 0.2s ease, box-shadow 0.2s ease;
  }

  .post-card:hover {
    transform: translateY(-4px);
    box-shadow: 0 12px 24px rgba(0, 0, 0, 0.1);
  }

  .post-card .post-image {
    height: 180px;
  }

  .post-card .post-content {
    padding: 1.5rem;
  }

  .newsletter-signup {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    border-radius: 16px;
    padding: 3rem 2rem;
    text-align: center;
    color: white;
  }

  .newsletter-content h2 {
    font-size: 2rem;
    font-weight: 600;
    margin-bottom: 1rem;
    color: white;
  }

  .newsletter-content p {
    font-size: 1.125rem;
    margin-bottom: 2rem;
    opacity: 0.9;
    max-width: 500px;
    margin-left: auto;
    margin-right: auto;
  }

  .newsletter-form .form-group {
    display: flex;
    max-width: 400px;
    margin: 0 auto;
    gap: 1rem;
  }

  .email-input {
    flex: 1;
    padding: 0.875rem 1rem;
    border: none;
    border-radius: 8px;
    font-size: 1rem;
  }

  .subscribe-btn {
    background: white;
    color: #667eea;
    border: none;
    padding: 0.875rem 2rem;
    border-radius: 8px;
    font-weight: 600;
    cursor: pointer;
    transition: transform 0.2s ease;
  }

  .subscribe-btn:hover {
    transform: translateY(-2px);
  }

  @media (max-width: 768px) {
    .blog-page {
      padding: 3rem 0;
    }

    .blog-header h1 {
      font-size: 2.25rem;
    }

    .featured-grid,
    .posts-grid {
      grid-template-columns: 1fr;
      gap: 1.5rem;
    }

    .category-buttons {
      justify-content: center;
    }

    .newsletter-form .form-group {
      flex-direction: column;
      max-width: 300px;
    }

    .newsletter-signup {
      padding: 2rem 1rem;
    }
  }

  /* Filter functionality */
  .post-card[data-category]:not([data-category="all"]) {
    display: block;
  }

  .post-card.hidden {
    display: none;
  }
</style>

<script>
  // Category filtering functionality
  document.addEventListener('DOMContentLoaded', function() {
    const categoryButtons = document.querySelectorAll('.category-btn');
    const postCards = document.querySelectorAll('.post-card');

    categoryButtons.forEach(button => {
      button.addEventListener('click', function(this: HTMLElement) {
        const category = this.getAttribute('data-category');
        
        // Update active button
        categoryButtons.forEach(btn => btn.classList.remove('active'));
        this.classList.add('active');
        
        // Filter posts
        postCards.forEach(card => {
          if (category === 'all' || card.getAttribute('data-category') === category) {
            card.classList.remove('hidden');
          } else {
            card.classList.add('hidden');
          }
        });
      });
    });
  });
</script>
